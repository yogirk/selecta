{"ast":null,"code":"var _jsxFileName = \"/Users/rk/Documents/Projects/conv-analytics-demo/frontend/src/components/ChatInterface/ChatInterface.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport './ChatInterface.css';\n\n// Placeholder for an icon, you would typically use an SVG or an icon library\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SendIcon = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n  width: \"24\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: /*#__PURE__*/_jsxDEV(\"path\", {\n    d: \"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\",\n    fill: \"currentColor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this);\n\n// Simple Typing Indicator Component\n_c = SendIcon;\nconst TypingIndicator = () => {\n  _s();\n  const phrases = [\"  Thinking about the query\", \"  Understanding the table schema and underlying data\", \"  Generating a plan to come up with answers and insights\", \"  Performing accurate NL2SQL conversion\", \"  Making API calls to BigQuery\", \"  Fetching SQL response from BigQuery\", \"  Processing result\"];\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentPhraseIndex(prevIndex => (prevIndex + 1) % phrases.length);\n    }, 5000); // Change phrase every 2 seconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, [phrases.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message bot typing-indicator\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-bubble\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-dots\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-text\",\n        children: phrases[currentPhraseIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingIndicator, \"O4nol4nQSD+6bTXKNeVybUKv/Ws=\");\n_c2 = TypingIndicator;\nconst suggestedQuestions = [{\n  heading: 'Understanding BQ Dataset',\n  question: 'Describe the tables and the data that you can answer questions over.'\n}, {\n  heading: 'Higher Distribution Cost',\n  question: 'Identify and show distribution centers with unusually high distribution costs relative to the average distribution costs for similar product categories?'\n}, {\n  heading: 'Problematic Product categories',\n  question: 'Calculate the return rate per product category, considering only orders that have been both shipped and delivered, to identify problematic product categories?'\n}, {\n  heading: 'Multi-Channel Attribution',\n  question: 'Calculate the conversion rate (percentage of events leading to an order) for each browser type, to optimize website compatibility and user experience?'\n}, {\n  heading: 'Most Expensive Products',\n  question: 'Find the top 5 most expensive products (based on retail price) within each category?'\n}, {\n  heading: 'Potential Bot Attacks',\n  question: 'Identify IP addresses associated with a disproportionately high number of distinct user sessions, potentially indicating shared proxies or bot networks?'\n}];\nconst ChatInterface = () => {\n  _s2();\n  var _messages;\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Hello! I am Retail DataWise. I can answer business questions over your BigQuery data. How can I assist you today?\",\n    sender: 'bot',\n    timestamp: new Date()\n  }]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const [userId] = useState(`user_${Date.now()}`); // Simple unique user ID\n\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSuggestionClick = question => {\n    setInputValue(question); // Set the input value to the suggested question\n    // Programmatically trigger the send message action\n    // We need to simulate the event object or modify handleSendMessage to accept the message directly\n    // Let's modify handleSendMessage to accept an optional message string\n    // handleSendMessage({ preventDefault: () => {} }, question); // Pass a dummy event and the question\n  };\n\n  // Modify handleSendMessage to accept an optional message string\n  const handleSendMessage = async (e, messageString = inputValue) => {\n    e.preventDefault();\n    const messageToSend = messageString.trim(); // Use the passed string or current inputValue\n    if (messageToSend === '' || isLoading) return;\n    const userMessage = {\n      id: Date.now(),\n      text: messageToSend,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInputValue(''); // Clear input after sending\n    setIsLoading(true);\n    try {\n      let requestBody;\n      const currentInputValue = messageToSend; // Use the captured messageToSend\n\n      if (!sessionId) {\n        console.log(\"No session ID, creating a new session and sending message...\");\n        requestBody = {\n          user_id: userId,\n          message: {\n            message: currentInputValue,\n            role: 'user'\n          }\n        };\n      } else {\n        console.log(\"Existing session ID, sending message:\", sessionId);\n        requestBody = {\n          user_id: userId,\n          session_id: sessionId,\n          message: {\n            message: currentInputValue,\n            role: 'user'\n          }\n        };\n      }\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          detail: \"Unknown error occurred\"\n        }));\n        throw new Error(`HTTP error! status: ${response.status} - ${errorData.detail || errorData.error || \"Failed to send/process message\"}`);\n      }\n      const data = await response.json();\n      if (!sessionId && data.session_id) {\n        setSessionId(data.session_id);\n        console.log(\"New session created and ID set:\", data.session_id);\n      }\n      if (data.messages && data.messages.length > 0) {\n        const botReplies = data.messages.map((msg, index) => ({\n          id: Date.now() + index,\n          text: msg.content,\n          sender: msg.role === 'user' ? 'user' : 'bot',\n          timestamp: new Date()\n        }));\n        setMessages(prevMessages => [...prevMessages, ...botReplies]);\n      } else if (data.error) {\n        throw new Error(data.error);\n      } else if (!sessionId && !data.session_id) {\n        throw new Error(\"Failed to retrieve session ID and no messages received.\");\n      } else if (data.messages && data.messages.length === 0) {\n        console.warn(\"Received empty messages array from bot, but no error:\", data);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        id: Date.now(),\n        text: `Error: ${error.message}`,\n        sender: 'system',\n        timestamp: new Date()\n      }]);\n    } finally {\n      var _document$querySelect;\n      setIsLoading(false);\n      (_document$querySelect = document.querySelector('.chat-input input')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.focus();\n    }\n  };\n  const formatTimestamp = date => {\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface-page\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"page-header chat-page-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"DataWise Agent Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-interface\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              className: \"message-text\",\n              remarkPlugins: [remarkGfm],\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-timestamp\",\n              children: formatTimestamp(msg.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, msg.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)), isLoading && ((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.sender) === 'user' && /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 75\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggested-questions\",\n        children: suggestedQuestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestion-card\",\n          onClick: () => handleSuggestionClick(suggestion.question),\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: suggestion.heading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: suggestion.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"chat-input-area\",\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: handleInputChange,\n          placeholder: \"Type your message...\",\n          \"aria-label\": \"Chat input\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading || inputValue.trim() === '',\n          \"aria-label\": \"Send message\",\n          children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loader\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 24\n          }, this) : /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 57\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatInterface, \"KpkvJovk6UIt8PigSV0q5kGp+48=\");\n_c3 = ChatInterface;\nexport default ChatInterface;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SendIcon\");\n$RefreshReg$(_c2, \"TypingIndicator\");\n$RefreshReg$(_c3, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactMarkdown","remarkGfm","jsxDEV","_jsxDEV","SendIcon","width","height","viewBox","fill","xmlns","children","d","fileName","_jsxFileName","lineNumber","columnNumber","_c","TypingIndicator","_s","phrases","currentPhraseIndex","setCurrentPhraseIndex","interval","setInterval","prevIndex","length","clearInterval","className","_c2","suggestedQuestions","heading","question","ChatInterface","_s2","_messages","messages","setMessages","id","text","sender","timestamp","Date","inputValue","setInputValue","isLoading","setIsLoading","sessionId","setSessionId","userId","now","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleInputChange","e","target","value","handleSuggestionClick","handleSendMessage","messageString","preventDefault","messageToSend","trim","userMessage","prevMessages","requestBody","currentInputValue","console","log","user_id","message","role","session_id","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","catch","detail","Error","status","error","data","botReplies","map","msg","index","content","warn","_document$querySelect","document","querySelector","focus","formatTimestamp","date","toLocaleTimeString","hour","minute","remarkPlugins","ref","suggestion","onClick","onSubmit","type","onChange","placeholder","disabled","_c3","$RefreshReg$"],"sources":["/Users/rk/Documents/Projects/conv-analytics-demo/frontend/src/components/ChatInterface/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport './ChatInterface.css';\n\n// Placeholder for an icon, you would typically use an SVG or an icon library\nconst SendIcon = () => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n  </svg>\n);\n\n// Simple Typing Indicator Component\nconst TypingIndicator = () => {\n  const phrases = [\n    \"  Thinking about the query\",\n    \"  Understanding the table schema and underlying data\",\n    \"  Generating a plan to come up with answers and insights\",\n    \"  Performing accurate NL2SQL conversion\",\n    \"  Making API calls to BigQuery\",\n    \"  Fetching SQL response from BigQuery\",\n    \"  Processing result\",\n  ];\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentPhraseIndex((prevIndex) => (prevIndex + 1) % phrases.length);\n    }, 5000); // Change phrase every 2 seconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, [phrases.length]);\n\n  return (\n    <div className=\"message bot typing-indicator\">\n      <div className=\"message-bubble\">\n      <div className=\"typing-dots\">\n          <span className=\"dot\"></span>\n          <span className=\"dot\"></span>\n          <span className=\"dot\"></span>\n        </div>\n        <div className=\"typing-text\">\n          {phrases[currentPhraseIndex]}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst suggestedQuestions = [\n  { heading: 'Understanding BQ Dataset', question: 'Describe the tables and the data that you can answer questions over.' },\n  { heading: 'Higher Distribution Cost', question: 'Identify and show distribution centers with unusually high distribution costs relative to the average distribution costs for similar product categories?'},\n  { heading: 'Problematic Product categories', question: 'Calculate the return rate per product category, considering only orders that have been both shipped and delivered, to identify problematic product categories?' },\n  { heading: 'Multi-Channel Attribution', question: 'Calculate the conversion rate (percentage of events leading to an order) for each browser type, to optimize website compatibility and user experience?' },\n  { heading: 'Most Expensive Products', question: 'Find the top 5 most expensive products (based on retail price) within each category?' },\n  { heading: 'Potential Bot Attacks', question: 'Identify IP addresses associated with a disproportionately high number of distinct user sessions, potentially indicating shared proxies or bot networks?' },\n];\n\nconst ChatInterface = () => {\n  const [messages, setMessages] = useState([\n    { id: 1, text: \"Hello! I am Retail DataWise. I can answer business questions over your BigQuery data. How can I assist you today?\", sender: 'bot', timestamp: new Date() }\n  ]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const [userId] = useState(`user_${Date.now()}`); // Simple unique user ID\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSuggestionClick = (question) => {\n    setInputValue(question); // Set the input value to the suggested question\n    // Programmatically trigger the send message action\n    // We need to simulate the event object or modify handleSendMessage to accept the message directly\n    // Let's modify handleSendMessage to accept an optional message string\n    // handleSendMessage({ preventDefault: () => {} }, question); // Pass a dummy event and the question\n  };\n\n  // Modify handleSendMessage to accept an optional message string\n  const handleSendMessage = async (e, messageString = inputValue) => {\n    e.preventDefault();\n    const messageToSend = messageString.trim(); // Use the passed string or current inputValue\n    if (messageToSend === '' || isLoading) return;\n\n    const userMessage = { id: Date.now(), text: messageToSend, sender: 'user', timestamp: new Date() };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInputValue(''); // Clear input after sending\n    setIsLoading(true);\n\n    try {\n      let requestBody;\n      const currentInputValue = messageToSend; // Use the captured messageToSend\n\n      if (!sessionId) {\n        console.log(\"No session ID, creating a new session and sending message...\");\n        requestBody = {\n          user_id: userId,\n          message: { message: currentInputValue, role: 'user' }\n        };\n      } else {\n        console.log(\"Existing session ID, sending message:\", sessionId);\n        requestBody = {\n          user_id: userId,\n          session_id: sessionId,\n          message: { message: currentInputValue, role: 'user' }\n        };\n      }\n\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ detail: \"Unknown error occurred\" }));\n        throw new Error(`HTTP error! status: ${response.status} - ${errorData.detail || errorData.error || \"Failed to send/process message\"}`);\n      }\n\n      const data = await response.json();\n\n      if (!sessionId && data.session_id) {\n        setSessionId(data.session_id);\n        console.log(\"New session created and ID set:\", data.session_id);\n      }\n\n      if (data.messages && data.messages.length > 0) {\n        const botReplies = data.messages.map((msg, index) => ({\n          id: Date.now() + index,\n          text: msg.content,\n          sender: msg.role === 'user' ? 'user' : 'bot',\n          timestamp: new Date()\n        }));\n        setMessages(prevMessages => [...prevMessages, ...botReplies]);\n      } else if (data.error) {\n         throw new Error(data.error);\n      } else if (!sessionId && !data.session_id) {\n        throw new Error(\"Failed to retrieve session ID and no messages received.\");\n      } else if (data.messages && data.messages.length === 0) {\n        console.warn(\"Received empty messages array from bot, but no error:\", data);\n      }\n\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prevMessages => [...prevMessages, { id: Date.now(), text: `Error: ${error.message}`, sender: 'system', timestamp: new Date() }]);\n    } finally {\n        setIsLoading(false);\n        document.querySelector('.chat-input input')?.focus();\n    }\n  };\n\n  const formatTimestamp = (date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  return (\n    <div className=\"chat-interface-page\"> {/* Renamed for clarity and page-level styling */}\n      <header className=\"page-header chat-page-header\">\n        <h1>DataWise Agent Chat</h1>\n      </header>\n      <div className=\"chat-interface\"> {/* Kept original for existing styles, will adjust CSS */}\n        <div className=\"chat-messages\">\n          {messages.map((msg) => (\n            <div key={msg.id} className={`message ${msg.sender}`}>\n            <div className=\"message-bubble\">\n              <ReactMarkdown className=\"message-text\" remarkPlugins={[remarkGfm]}>{msg.text}</ReactMarkdown>\n              <span className=\"message-timestamp\">{formatTimestamp(msg.timestamp)}</span>\n            </div>\n          </div>\n        ))}\n        {isLoading && messages[messages.length - 1]?.sender === 'user' && <TypingIndicator />} {/* Conditionally render typing indicator */}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"suggested-questions\">\n        {suggestedQuestions.map((suggestion, index) => (\n          <div\n            key={index}\n            className=\"suggestion-card\"\n            onClick={() => handleSuggestionClick(suggestion.question)}\n          >\n            <h4>{suggestion.heading}</h4>\n            <p>{suggestion.question}</p>\n          </div>\n        ))}\n      </div>\n      <form className=\"chat-input-area\" onSubmit={handleSendMessage}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          aria-label=\"Chat input\"\n          disabled={isLoading}\n        />\n        <button type=\"submit\" disabled={isLoading || inputValue.trim() === ''} aria-label=\"Send message\">\n          {isLoading ? <div className=\"loader\"></div> : <SendIcon />}\n        </button>\n      </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}